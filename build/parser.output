Nonterminals useless in grammar

    constant_expression
    declaration
    init_declarator_list
    init_declarator
    struct_specifier
    struct_declaration_list
    struct_declaration
    specifier_qualifier_list
    struct_declarator_list
    struct_declarator
    enum_specifier
    enumerator_list
    enumerator
    pointer
    parameter_list
    parameter_declaration
    identifier_list
    type_name
    abstract_declarator
    direct_abstract_declarator
    initializer
    initializer_list
    labeled_statement
    declaration_list
    expression_statement
    selection_statement
    iteration_statement
    unary_operator
    assignment_operator
    storage_class_specifier
    argument_expression_list


Terminals unused in grammar

    FLOAT_CONSTANT
    STRING_LITERAL
    PTR_OP
    INC_OP
    DEC_OP
    LEFT_OP
    RIGHT_OP
    LE_OP
    GE_OP
    EQ_OP
    NE_OP
    AND_OP
    OR_OP
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN
    SUB_ASSIGN
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
    TYPE_NAME
    TYPEDEF
    EXTERN
    STATIC
    AUTO
    REGISTER
    SIZEOF
    CHAR
    SHORT
    LONG
    SIGNED
    UNSIGNED
    FLOAT
    DOUBLE
    CONST
    VOLATILE
    VOID
    STRUCT
    UNION
    ENUM
    ELLIPSIS
    CASE
    DEFAULT
    IF
    ELSE
    SWITCH
    WHILE
    DO
    FOR
    GOTO
    CONTINUE
    BREAK


Rules useless in grammar

   33 argument_expression_list: assignment_expression


Grammar

    0 $accept: ROOT $end

    1 ROOT: translation_unit

    2 translation_unit: external_declaration

    3 external_declaration: function_definition

    4 function_definition: declaration_specifiers declarator compound_statement

    5 declaration_specifiers: type_specifier

    6 type_specifier: INT

    7 declarator: direct_declarator

    8 direct_declarator: IDENTIFIER
    9                  | direct_declarator '(' ')'

   10 statement: jump_statement

   11 compound_statement: '{' statement_list '}'

   12 statement_list: statement
   13               | statement_list statement

   14 jump_statement: RETURN ';'
   15               | RETURN expression ';'

   16 primary_expression: INT_CONSTANT

   17 postfix_expression: primary_expression

   18 unary_expression: postfix_expression

   19 cast_expression: unary_expression

   20 multiplicative_expression: cast_expression

   21 additive_expression: multiplicative_expression

   22 shift_expression: additive_expression

   23 relational_expression: shift_expression

   24 equality_expression: relational_expression

   25 and_expression: equality_expression

   26 exclusive_or_expression: and_expression

   27 inclusive_or_expression: exclusive_or_expression

   28 logical_and_expression: inclusive_or_expression

   29 logical_or_expression: logical_and_expression

   30 conditional_expression: logical_or_expression

   31 assignment_expression: conditional_expression

   32 expression: assignment_expression


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 9
    ')' (41) 9
    ';' (59) 14 15
    '{' (123) 11
    '}' (125) 11
    error (256)
    IDENTIFIER <string> (258) 8
    INT_CONSTANT <number_int> (259) 16
    FLOAT_CONSTANT <number_float> (260)
    STRING_LITERAL <number_int> (261)
    PTR_OP (262)
    INC_OP (263)
    DEC_OP (264)
    LEFT_OP (265)
    RIGHT_OP (266)
    LE_OP (267)
    GE_OP (268)
    EQ_OP (269)
    NE_OP (270)
    AND_OP (271)
    OR_OP (272)
    MUL_ASSIGN (273)
    DIV_ASSIGN (274)
    MOD_ASSIGN (275)
    ADD_ASSIGN (276)
    SUB_ASSIGN (277)
    LEFT_ASSIGN (278)
    RIGHT_ASSIGN (279)
    AND_ASSIGN (280)
    XOR_ASSIGN (281)
    OR_ASSIGN (282)
    TYPE_NAME (283)
    TYPEDEF (284)
    EXTERN (285)
    STATIC (286)
    AUTO (287)
    REGISTER (288)
    SIZEOF (289)
    CHAR (290)
    SHORT (291)
    INT (292) 6
    LONG (293)
    SIGNED (294)
    UNSIGNED (295)
    FLOAT (296)
    DOUBLE (297)
    CONST (298)
    VOLATILE (299)
    VOID (300)
    STRUCT (301)
    UNION (302)
    ENUM (303)
    ELLIPSIS (304)
    CASE (305)
    DEFAULT (306)
    IF (307)
    ELSE (308)
    SWITCH (309)
    WHILE (310)
    DO (311)
    FOR (312)
    GOTO (313)
    CONTINUE (314)
    BREAK (315)
    RETURN (316) 14 15


Nonterminals, with rules where they appear

    $accept (67)
        on left: 0
    ROOT (68)
        on left: 1
        on right: 0
    translation_unit <node> (69)
        on left: 2
        on right: 1
    external_declaration <node> (70)
        on left: 3
        on right: 2
    function_definition <node> (71)
        on left: 4
        on right: 3
    declaration_specifiers <node> (72)
        on left: 5
        on right: 4
    type_specifier <node> (73)
        on left: 6
        on right: 5
    declarator <node> (74)
        on left: 7
        on right: 4
    direct_declarator <node> (75)
        on left: 8 9
        on right: 7 9
    statement <node> (76)
        on left: 10
        on right: 12 13
    compound_statement <node> (77)
        on left: 11
        on right: 4
    statement_list <nodes> (78)
        on left: 12 13
        on right: 11 13
    jump_statement <node> (79)
        on left: 14 15
        on right: 10
    primary_expression <node> (80)
        on left: 16
        on right: 17
    postfix_expression <node> (81)
        on left: 17
        on right: 18
    unary_expression <node> (82)
        on left: 18
        on right: 19
    cast_expression <node> (83)
        on left: 19
        on right: 20
    multiplicative_expression <node> (84)
        on left: 20
        on right: 21
    additive_expression <node> (85)
        on left: 21
        on right: 22
    shift_expression <node> (86)
        on left: 22
        on right: 23
    relational_expression <node> (87)
        on left: 23
        on right: 24
    equality_expression <node> (88)
        on left: 24
        on right: 25
    and_expression <node> (89)
        on left: 25
        on right: 26
    exclusive_or_expression <node> (90)
        on left: 26
        on right: 27
    inclusive_or_expression <node> (91)
        on left: 27
        on right: 28
    logical_and_expression <node> (92)
        on left: 28
        on right: 29
    logical_or_expression <node> (93)
        on left: 29
        on right: 30
    conditional_expression <node> (94)
        on left: 30
        on right: 31
    assignment_expression <node> (95)
        on left: 31
        on right: 32
    expression <node> (96)
        on left: 32
        on right: 15


State 0

    0 $accept: . ROOT $end

    INT  shift, and go to state 1

    ROOT                    go to state 2
    translation_unit        go to state 3
    external_declaration    go to state 4
    function_definition     go to state 5
    declaration_specifiers  go to state 6
    type_specifier          go to state 7


State 1

    6 type_specifier: INT .

    $default  reduce using rule 6 (type_specifier)


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 8


State 3

    1 ROOT: translation_unit .

    $default  reduce using rule 1 (ROOT)


State 4

    2 translation_unit: external_declaration .

    $default  reduce using rule 2 (translation_unit)


State 5

    3 external_declaration: function_definition .

    $default  reduce using rule 3 (external_declaration)


State 6

    4 function_definition: declaration_specifiers . declarator compound_statement

    IDENTIFIER  shift, and go to state 9

    declarator         go to state 10
    direct_declarator  go to state 11


State 7

    5 declaration_specifiers: type_specifier .

    $default  reduce using rule 5 (declaration_specifiers)


State 8

    0 $accept: ROOT $end .

    $default  accept


State 9

    8 direct_declarator: IDENTIFIER .

    $default  reduce using rule 8 (direct_declarator)


State 10

    4 function_definition: declaration_specifiers declarator . compound_statement

    '{'  shift, and go to state 12

    compound_statement  go to state 13


State 11

    7 declarator: direct_declarator .
    9 direct_declarator: direct_declarator . '(' ')'

    '('  shift, and go to state 14

    $default  reduce using rule 7 (declarator)


State 12

   11 compound_statement: '{' . statement_list '}'

    RETURN  shift, and go to state 15

    statement       go to state 16
    statement_list  go to state 17
    jump_statement  go to state 18


State 13

    4 function_definition: declaration_specifiers declarator compound_statement .

    $default  reduce using rule 4 (function_definition)


State 14

    9 direct_declarator: direct_declarator '(' . ')'

    ')'  shift, and go to state 19


State 15

   14 jump_statement: RETURN . ';'
   15               | RETURN . expression ';'

    INT_CONSTANT  shift, and go to state 20
    ';'           shift, and go to state 21

    primary_expression         go to state 22
    postfix_expression         go to state 23
    unary_expression           go to state 24
    cast_expression            go to state 25
    multiplicative_expression  go to state 26
    additive_expression        go to state 27
    shift_expression           go to state 28
    relational_expression      go to state 29
    equality_expression        go to state 30
    and_expression             go to state 31
    exclusive_or_expression    go to state 32
    inclusive_or_expression    go to state 33
    logical_and_expression     go to state 34
    logical_or_expression      go to state 35
    conditional_expression     go to state 36
    assignment_expression      go to state 37
    expression                 go to state 38


State 16

   12 statement_list: statement .

    $default  reduce using rule 12 (statement_list)


State 17

   11 compound_statement: '{' statement_list . '}'
   13 statement_list: statement_list . statement

    RETURN  shift, and go to state 15
    '}'     shift, and go to state 39

    statement       go to state 40
    jump_statement  go to state 18


State 18

   10 statement: jump_statement .

    $default  reduce using rule 10 (statement)


State 19

    9 direct_declarator: direct_declarator '(' ')' .

    $default  reduce using rule 9 (direct_declarator)


State 20

   16 primary_expression: INT_CONSTANT .

    $default  reduce using rule 16 (primary_expression)


State 21

   14 jump_statement: RETURN ';' .

    $default  reduce using rule 14 (jump_statement)


State 22

   17 postfix_expression: primary_expression .

    $default  reduce using rule 17 (postfix_expression)


State 23

   18 unary_expression: postfix_expression .

    $default  reduce using rule 18 (unary_expression)


State 24

   19 cast_expression: unary_expression .

    $default  reduce using rule 19 (cast_expression)


State 25

   20 multiplicative_expression: cast_expression .

    $default  reduce using rule 20 (multiplicative_expression)


State 26

   21 additive_expression: multiplicative_expression .

    $default  reduce using rule 21 (additive_expression)


State 27

   22 shift_expression: additive_expression .

    $default  reduce using rule 22 (shift_expression)


State 28

   23 relational_expression: shift_expression .

    $default  reduce using rule 23 (relational_expression)


State 29

   24 equality_expression: relational_expression .

    $default  reduce using rule 24 (equality_expression)


State 30

   25 and_expression: equality_expression .

    $default  reduce using rule 25 (and_expression)


State 31

   26 exclusive_or_expression: and_expression .

    $default  reduce using rule 26 (exclusive_or_expression)


State 32

   27 inclusive_or_expression: exclusive_or_expression .

    $default  reduce using rule 27 (inclusive_or_expression)


State 33

   28 logical_and_expression: inclusive_or_expression .

    $default  reduce using rule 28 (logical_and_expression)


State 34

   29 logical_or_expression: logical_and_expression .

    $default  reduce using rule 29 (logical_or_expression)


State 35

   30 conditional_expression: logical_or_expression .

    $default  reduce using rule 30 (conditional_expression)


State 36

   31 assignment_expression: conditional_expression .

    $default  reduce using rule 31 (assignment_expression)


State 37

   32 expression: assignment_expression .

    $default  reduce using rule 32 (expression)


State 38

   15 jump_statement: RETURN expression . ';'

    ';'  shift, and go to state 41


State 39

   11 compound_statement: '{' statement_list '}' .

    $default  reduce using rule 11 (compound_statement)


State 40

   13 statement_list: statement_list statement .

    $default  reduce using rule 13 (statement_list)


State 41

   15 jump_statement: RETURN expression ';' .

    $default  reduce using rule 15 (jump_statement)
